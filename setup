#!/bin/env sh

# Setup my dotfiles for a fresh Xubuntu installation.
# Important: this script requires to have ssh configured for GitHub.

# Few steps that need to be run manually:
# update /etc/apt/sources.list with additional deb-src URIS
# run wget https://raw.githubusercontent.com/luanrvmood/dotfiles/main/setup -O setup
# run chmod +x setup
# run ./setup

echo 'Updating apt packages...'
sudo apt update

echo 'Uninstalling LibreOffice...'
sudo apt remove --purge libreoffice*

echo 'Uninstalling pidgin...'
sudo apt remove --purge pidgin

echo 'Installing Git...'
sudo apt update
sudo apt install -y git

echo 'Downloading dotfiles...'
git clone git@github.com:luanrvmood/dotfiles.git ~/.dotfiles
ln -s ~/.dotfiles/git/gitconfig ~/.gitconfig

echo 'Setting up JetBrains Mono font...'
sudo apt install -y curl
curl -fsSL https://raw.githubusercontent.com/JetBrains/JetBrainsMono/master/install_manual.sh | bash -

echo 'Installing tmux...'
sudo apt install -y tmux

echo 'Setting up bash...'
ln -sf ~/.dotfiles/shell/aliases ~/.aliases
ln -sf ~/.dotfiles/shell/bashrc ~/.bashrc
ln -sf ~/.dotfiles/shell/terminalrc ~/.config/xfce4/terminal/terminalrc
ln -sf ~/.dotfiles/shell/inputrc ~/.inputrc
ln -sf ~/.dotfiles/shell/tmux.conf ~/.tmux.conf

echo 'Installing bat...'
sudo apt install -y bat
cd
mkdir -p .local/bin
ln -s /usr/bin/batcat .local/bin/bat

echo 'Installing asdf for managing development environments...'
git clone https://github.com/asdf-vm/asdf.git ~/.asdf
cd ~/.asdf
git checkout "$(git describe --abbrev=0 --tags)"
cd
source ~/.bashrc

# NOTE: need to set the installed version globally
echo 'Setting up Node environment...'
sudo apt install -y dirmngr gpg gawk
asdf plugin add nodejs
bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'
asdf install nodejs latest
asdf plugin add yarn
asdf install yarn latest

echo 'Setting up Python environment...'
sudo apt install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl
asdf plugin add python
asdf install python latest

echo 'Setting up Ruby environment...'
asdf plugin add ruby
asdf install ruby latest

echo 'Setting up Erlang/Elixir environments...'
asdf plugin add erlang
asdf install erlang latest
asdf plugin add elixir
asdf install elixir latest

echo 'Setting up Vim...'
sudo apt build-dep -y vim
git clone git@github.com:vim/vim.git ~/vim
cd ~/vim
./configure --with-x
make
sudo make install
cd
rm -rf vim
ln -sf ~/.dotfiles/editor/vimrc ~/.vimrc

echo 'Setting up Dracula for Vim...'
mkdir -p ~/.vim/pack/themes/start
cd ~/.vim/pack/themes/start
git clone https://github.com/dracula/vim.git dracula
cd

echo 'Setting up NERDTRee for Vim...'
mkdir -p ~/.vim/pack/plugins/start/
cd ~/.vim/pack/plugins/start/
git clone git@github.com:preservim/nerdtree.git
cd

echo 'Setting up CoC for Vim...'
ln -sf ~/.dotfiles/editor/coc-settings.json ~/.vim
mkdir -p ~/.vim/pack/plugins/start/
cd ~/.vim/pack/plugins/start/
git clone git@github.com:neoclide/coc.nvim.git
cd

echo 'Setting up emmet for Vim...'
mkdir -p ~/.vim/pack/plugins/start/
cd ~/.vim/pack/plugins/start/
git clone git@github.com:mattn/emmet-vim.git
cd

echo 'Setting up WakaTime for Vim...'
mkdir -p ~/.vim/pack/plugins/start/
cd ~/.vim/pack/plugins/start/
git clone git@github.com:wakatime/vim-wakatime.git
cd

# echo 'Setting up word motion for Vim...'
# mkdir -p ~/.vim/plugins/start/
# cd ~/.vim/plugins/start/
# git clone git@github.com:chaoren/vim-wordmotion.git
# cd

echo 'Setting up JavaScript syntax for Vim...'
mkdir -p ~/.vim/pack/syntax/start/
cd ~/.vim/pack/syntax/start/
git clone git@github.com:pangloss/vim-javascript.git
cd

echo 'Setting up TypeScript syntax for Vim...'
mkdir -p ~/.vim/pack/syntax/start/
cd ~/.vim/pack/syntax/start/
git clone git@github.com:leafgarland/typescript-vim.git
cd

echo 'Setting up React/JSX syntax for Vim...'
mkdir -p ~/.vim/pack/syntax/start
cd ~/.vim/pack/syntax/start
git clone git@github.com:MaxMEllon/vim-jsx-pretty.git
cd

echo 'Setting up Elixir syntax for Vim...'
mkdir -p ~/.vim/pack/syntax/start
cd ~/.vim/pack/syntax/start
git clone git@github.com:elixir-editors/vim-elixir.git

# TODO: fetch Python syntax file from remote
# echo 'Setting up Python syntax for Vim...'
# mkdir -p ~/.vim/after/syntax/
# ln -s ~/dotfiles/dotvim/after/syntax/python.vim ~/.vim/after/syntax/python.vim

echo 'Installing Docker...'
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io

echo 'Installling docker-compose...'
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o ~/.local/bin/docker-compose
sudo chmod +x ~/.local/bin/docker-compose


echo 'Installing Typora...'
wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -
sudo add-apt-repository 'deb https://typora.io/linux ./'
sudo apt update
sudo apt install -y typora

echo 'Installing Google Chrome...'
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O ~/downloads/google-chrome.deb
sudo apt install ./downloads/google-chrome.deb
rm ~/downloads/google-chrome.deb

echo 'Installing youtube-dl...'
curl -L https://yt-dl.org/downloads/latest/youtube-dl -o ~/.local/bin/youtube-dl
chmod +x ~/.local/bin/youtube-dl

echo 'Setting up screenshot utilities...'
sudo apt install -y maim xclip

echo 'Setting up system folders...'
cd
ln -sf ~/.dotfiles/config/user-dirs.dirs ~/.config/user-dirs.dirs
rm -rf Desktop Downloads Music Pictures Public Videos Documents Templates
mkdir downloads docs pics codes tracks tv

echo 'Setting up i3wm...'
sudo apt install -y i3
echo 'exec i3' > ~/.xinitrc
mkdir ~/.config/i3
mkdir ~/.config/i3status
ln -s ~/.dotfiles/config/i3/config ~/.config/i3/config
ln -s ~/.dotfiles/config/i3status/config ~/.config/i3status/config

echo 'Uninstalling xfce4 desktop environment...'
sudo apt remove --purge -y xfdesktop4 xfdesktop4-data
xfconf-query -c xfce4-session -p /sessions/Failsafe/Client0_Command -t string -sa i3

echo 'Upgrading system packages...'
sudo apt update
sudo apt upgrade -y

echo 'DONE!'
echo 'Restarting...'
echo 'Restarting...'
echo 'Restarting...'
reboot

# Things to do after reboot:
#
# gem install solargraph (for coc-solargraph)
# asdf global <env> <version> (for each language installed)
